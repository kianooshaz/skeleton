// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package container

import (
	"database/sql"
	"github.com/google/wire"
	"github.com/kianooshaz/skeleton/foundation/config"
	"github.com/kianooshaz/skeleton/foundation/database/postgres"
	"github.com/kianooshaz/skeleton/foundation/log"
	"github.com/kianooshaz/skeleton/internal/app/web/protocol"
	"github.com/kianooshaz/skeleton/internal/app/web/rest"
	"github.com/kianooshaz/skeleton/services/account/username/proto"
	"github.com/kianooshaz/skeleton/services/account/username/service"
	"github.com/kianooshaz/skeleton/services/authentication/password/proto"
	"github.com/kianooshaz/skeleton/services/authentication/password/service"
	"github.com/kianooshaz/skeleton/services/organization/organization/proto"
	"github.com/kianooshaz/skeleton/services/organization/organization/service"
	"github.com/kianooshaz/skeleton/services/risk/audit/proto"
	"github.com/kianooshaz/skeleton/services/risk/audit/service"
	"github.com/kianooshaz/skeleton/services/user/user/proto"
	"github.com/kianooshaz/skeleton/services/user/user/service"
	"github.com/knadh/koanf/v2"
	"log/slog"
)

// Injectors from wire.go:

// NewWebContainer creates a new web container with all dependencies wired.
func NewWebContainer() (Container, error) {
	koanf, err := config.LoadConfigWithDefaults()
	if err != nil {
		return nil, err
	}
	appConfig, err := ProvideAppConfig(koanf)
	if err != nil {
		return nil, err
	}
	loggerConfig := ProvideLoggerConfig(appConfig)
	logger := log.NewLogger(loggerConfig)
	postgresConfig := ProvidePostgresConfig(appConfig)
	db, err := postgres.NewConnection(postgresConfig)
	if err != nil {
		return nil, err
	}
	restConfig := ProvideRestConfig(appConfig)
	userService := userservice.New(db, logger)
	organizationService := orgservice.New(db, logger)
	passwordserviceConfig := ProvidePasswordConfig(appConfig)
	passwordService := passwordservice.New(passwordserviceConfig, db, logger)
	usernameserviceConfig := ProvideUsernameConfig(appConfig)
	usernameService := usernameservice.New(usernameserviceConfig, db, logger)
	auditserviceConfig := ProvideAuditConfig(appConfig)
	auditService := auditservice.New(auditserviceConfig, db, logger)
	webService, err := rest.New(restConfig, logger, userService, organizationService, passwordService, usernameService, auditService)
	if err != nil {
		return nil, err
	}
	container := ProvideWebContainer(appConfig, logger, db, webService, userService, organizationService, passwordService, usernameService, auditService)
	return container, nil
}

// wire.go:

// Simple config extraction functions - Wire can use these automatically.
func ProvideAppConfig(k *koanf.Koanf) (*AppConfig, error) {
	cfg, err := config.LoadFromKoanf[AppConfig](k, "app")
	if err != nil {
		return nil, err
	}
	return &cfg, nil
}

func ProvidePasswordConfig(cfg *AppConfig) passwordservice.Config { return cfg.Password }

func ProvideUsernameConfig(cfg *AppConfig) usernameservice.Config { return cfg.Username }

func ProvideAuditConfig(cfg *AppConfig) auditservice.Config { return cfg.Audit }

func ProvideRestConfig(cfg *AppConfig) rest.Config { return cfg.RestServer }

func ProvideLoggerConfig(cfg *AppConfig) log.LoggerConfig { return cfg.Logger }

func ProvidePostgresConfig(cfg *AppConfig) postgres.Config { return cfg.Postgres }

// ProvideWebContainer provides the complete web container.
func ProvideWebContainer(
	cfg *AppConfig,
	logger *slog.Logger,
	db *sql.DB,
	webService protocol.WebService,
	userService userproto.UserService,
	orgService orgproto.OrganizationService,
	passwordService passwordproto.PasswordService,
	usernameService usernameproto.UsernameService,
	auditService auditproto.AuditService,
) Container {
	return &WebContainer{
		config:              cfg,
		logger:              logger,
		db:                  db,
		webService:          webService,
		userService:         userService,
		organizationService: orgService,
		passwordService:     passwordService,
		usernameService:     usernameService,
		auditService:        auditService,
	}
}

// Wire sets define the dependency injection graph.
var ConfigSet = wire.NewSet(config.LoadConfigWithDefaults, ProvideAppConfig,
	ProvidePasswordConfig,
	ProvideUsernameConfig,
	ProvideAuditConfig,
	ProvideRestConfig,
	ProvideLoggerConfig,
	ProvidePostgresConfig,
)

var LoggerSet = wire.NewSet(log.NewLogger)

var DatabaseSet = wire.NewSet(postgres.NewConnection)

var WebContainerSet = wire.NewSet(
	ConfigSet,
	LoggerSet,
	DatabaseSet, userservice.New, orgservice.New, passwordservice.New, usernameservice.New, auditservice.New, rest.New, ProvideWebContainer,
)

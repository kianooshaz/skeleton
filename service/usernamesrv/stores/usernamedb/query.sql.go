// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package usernamedb

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countByUserID = `-- name: CountByUserID :one
SELECT COUNT(id) FROM usernames
WHERE user_id = $1 AND deleted_at IS NULL
`

func (q *Queries) CountByUserID(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countByUserID, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countByUsername = `-- name: CountByUsername :one
SELECT COUNT(id) FROM usernames
WHERE username_value = $1 AND deleted_at IS NULL
`

func (q *Queries) CountByUsername(ctx context.Context, usernameValue string) (int64, error) {
	row := q.db.QueryRow(ctx, countByUsername, usernameValue)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const create = `-- name: Create :one
INSERT INTO usernames (
    id, username_value, user_id, is_primary, status, created_at, updated_at, deleted_at
) VALUES (
             $1, $2, $3, $4, $5, NOW(), NOW(), NULL
         ) RETURNING id, username_value, user_id, status, is_primary, created_at, updated_at, deleted_at
`

type CreateParams struct {
	ID            uuid.UUID
	UsernameValue string
	UserID        uuid.UUID
	IsPrimary     bool
	Status        int64
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Username, error) {
	row := q.db.QueryRow(ctx, create,
		arg.ID,
		arg.UsernameValue,
		arg.UserID,
		arg.IsPrimary,
		arg.Status,
	)
	var i Username
	err := row.Scan(
		&i.ID,
		&i.UsernameValue,
		&i.UserID,
		&i.Status,
		&i.IsPrimary,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const delete = `-- name: Delete :exec
UPDATE usernames
SET 
    deleted_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const get = `-- name: Get :one
SELECT id, username_value, user_id, is_primary, status, created_at, updated_at FROM usernames
WHERE id = $1 AND deleted_at IS NULL
`

type GetRow struct {
	ID            uuid.UUID
	UsernameValue string
	UserID        uuid.UUID
	IsPrimary     bool
	Status        int64
	CreatedAt     pgtype.Timestamptz
	UpdatedAt     pgtype.Timestamptz
}

func (q *Queries) Get(ctx context.Context, id uuid.UUID) (GetRow, error) {
	row := q.db.QueryRow(ctx, get, id)
	var i GetRow
	err := row.Scan(
		&i.ID,
		&i.UsernameValue,
		&i.UserID,
		&i.IsPrimary,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getByUsername = `-- name: GetByUsername :one
SELECT id, username_value, user_id, is_primary, status, created_at, updated_at FROM usernames
WHERE username_value = $1 AND deleted_at IS NULL
`

type GetByUsernameRow struct {
	ID            uuid.UUID
	UsernameValue string
	UserID        uuid.UUID
	IsPrimary     bool
	Status        int64
	CreatedAt     pgtype.Timestamptz
	UpdatedAt     pgtype.Timestamptz
}

func (q *Queries) GetByUsername(ctx context.Context, usernameValue string) (GetByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getByUsername, usernameValue)
	var i GetByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.UsernameValue,
		&i.UserID,
		&i.IsPrimary,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const list = `-- name: List :many
SELECT id, username_value, user_id, is_primary, status, created_at, updated_at FROM usernames
WHERE user_id = $1 AND deleted_at IS NULL
`

type ListRow struct {
	ID            uuid.UUID
	UsernameValue string
	UserID        uuid.UUID
	IsPrimary     bool
	Status        int64
	CreatedAt     pgtype.Timestamptz
	UpdatedAt     pgtype.Timestamptz
}

func (q *Queries) List(ctx context.Context, userID uuid.UUID) ([]ListRow, error) {
	rows, err := q.db.Query(ctx, list, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRow
	for rows.Next() {
		var i ListRow
		if err := rows.Scan(
			&i.ID,
			&i.UsernameValue,
			&i.UserID,
			&i.IsPrimary,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :exec
UPDATE usernames
SET 
    is_primary = $1,
    status = $2,
    updated_at = NOW()
WHERE id = $3 AND deleted_at IS NULL
`

type UpdateParams struct {
	IsPrimary bool
	Status    int64
	ID        uuid.UUID
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.db.Exec(ctx, update, arg.IsPrimary, arg.Status, arg.ID)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package userdb

import (
	"context"

	"github.com/google/uuid"
)

const count = `-- name: Count :one
SELECT COUNT(id) FROM users
`

func (q *Queries) Count(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, count)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const create = `-- name: Create :one
INSERT INTO users (
    id, created_at
) VALUES (
             $1, NOW()
         )
RETURNING id, created_at
`

func (q *Queries) Create(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, create, id)
	var i User
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const get = `-- name: Get :one
SELECT id, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) Get(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, get, id)
	var i User
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const list = `-- name: List :many
SELECT id, created_at FROM users
ORDER BY
    CASE WHEN $1::varchar = 'created_at_ASC' THEN created_at END,
    CASE WHEN $1::varchar = 'created_at_DESC' THEN created_at END DESC
`

func (q *Queries) List(ctx context.Context, orderBy string) ([]User, error) {
	rows, err := q.db.Query(ctx, list, orderBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

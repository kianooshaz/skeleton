// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const count = `-- name: Count :one
SELECT COUNT(id) FROM usernames
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) Count(ctx context.Context, id string) (int64, error) {
	row := q.db.QueryRow(ctx, count, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countByUser = `-- name: CountByUser :one
SELECT COUNT(id) FROM usernames
WHERE user_id = $1 AND deleted_at IS NULL
`

func (q *Queries) CountByUser(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countByUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countByUserAndOrganization = `-- name: CountByUserAndOrganization :one
SELECT COUNT(id) FROM usernames
WHERE user_id = $1 AND deleted_at IS NULL
`

func (q *Queries) CountByUserAndOrganization(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countByUserAndOrganization, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const create = `-- name: Create :one
INSERT INTO usernames (
    id, user_id, organization_id, status, created_at, updated_at, deleted_at
) VALUES (
             $1, $2, $3, $4, NOW(), NOW(), NULL
         ) RETURNING id, user_id, organization_id, status, created_at, updated_at, deleted_at
`

type CreateParams struct {
	ID             string
	UserID         uuid.UUID
	OrganizationID uuid.UUID
	Status         int64
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Username, error) {
	row := q.db.QueryRow(ctx, create,
		arg.ID,
		arg.UserID,
		arg.OrganizationID,
		arg.Status,
	)
	var i Username
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrganizationID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const delete = `-- name: Delete :exec
UPDATE usernames
SET 
    deleted_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) Delete(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const get = `-- name: Get :one
SELECT id, user_id, organization_id, status, created_at, updated_at FROM usernames
WHERE id = $1 AND deleted_at IS NULL
`

type GetRow struct {
	ID             string
	UserID         uuid.UUID
	OrganizationID uuid.UUID
	Status         int64
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
}

func (q *Queries) Get(ctx context.Context, id string) (GetRow, error) {
	row := q.db.QueryRow(ctx, get, id)
	var i GetRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrganizationID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listByUser = `-- name: ListByUser :many
SELECT id, user_id, organization_id, status, created_at, updated_at FROM usernames
WHERE user_id = $1 AND deleted_at IS NULL
`

type ListByUserRow struct {
	ID             string
	UserID         uuid.UUID
	OrganizationID uuid.UUID
	Status         int64
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
}

func (q *Queries) ListByUser(ctx context.Context, userID uuid.UUID) ([]ListByUserRow, error) {
	rows, err := q.db.Query(ctx, listByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListByUserRow
	for rows.Next() {
		var i ListByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrganizationID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listByUserAndOrganization = `-- name: ListByUserAndOrganization :many
SELECT id, user_id, organization_id, status, created_at, updated_at FROM usernames
WHERE user_id = $1 AND organization_id = $2 AND deleted_at IS NULL
`

type ListByUserAndOrganizationParams struct {
	UserID         uuid.UUID
	OrganizationID uuid.UUID
}

type ListByUserAndOrganizationRow struct {
	ID             string
	UserID         uuid.UUID
	OrganizationID uuid.UUID
	Status         int64
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
}

func (q *Queries) ListByUserAndOrganization(ctx context.Context, arg ListByUserAndOrganizationParams) ([]ListByUserAndOrganizationRow, error) {
	rows, err := q.db.Query(ctx, listByUserAndOrganization, arg.UserID, arg.OrganizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListByUserAndOrganizationRow
	for rows.Next() {
		var i ListByUserAndOrganizationRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrganizationID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :exec
UPDATE usernames
SET 
    user_id = $2,
    organization_id = $3,
    status = $4,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateParams struct {
	ID             string
	UserID         uuid.UUID
	OrganizationID uuid.UUID
	Status         int64
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.db.Exec(ctx, update,
		arg.ID,
		arg.UserID,
		arg.OrganizationID,
		arg.Status,
	)
	return err
}

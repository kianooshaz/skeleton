// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const create = `-- name: Create :one
INSERT INTO passwords (
    id, user_id, password_hash, created_at, deleted_at
) VALUES (
             $1, $2, $3, NOW(), NULL
         )
RETURNING id, user_id, password_hash, created_at, deleted_at
`

type CreateParams struct {
	ID           uuid.UUID
	UserID       uuid.UUID
	PasswordHash string
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Password, error) {
	row := q.db.QueryRow(ctx, create, arg.ID, arg.UserID, arg.PasswordHash)
	var i Password
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const delete = `-- name: Delete :exec
UPDATE
    passwords
SET 
    deleted_at = NOW()
WHERE
    id = $1 AND deleted_at IS NULL
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const getByUserID = `-- name: GetByUserID :one
SELECT 
    id, user_id, password_hash, created_at, deleted_at
FROM
    passwords
WHERE
    user_id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetByUserID(ctx context.Context, userID uuid.UUID) (Password, error) {
	row := q.db.QueryRow(ctx, getByUserID, userID)
	var i Password
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const history = `-- name: History :many
SELECT 
    id, user_id, password_hash, created_at, deleted_at
FROM
    passwords
WHERE
    user_id = $1
`

func (q *Queries) History(ctx context.Context, userID uuid.UUID) ([]Password, error) {
	rows, err := q.db.Query(ctx, history, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Password
	for rows.Next() {
		var i Password
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
